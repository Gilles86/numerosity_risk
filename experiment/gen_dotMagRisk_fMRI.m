function gen_dotMagRisk_fMRI(subCode, run, nameSub, expType, inputTrials, startStim, numRoot, maxStim, rngMin, rngMax, rngSpc, probability, openFolder, subFolder)
% example: gen_dotMagRisk('MG', 'M', 0, 30, 5, 2, 28, -6, 6, 2, 0.55)
%% Magnitude Comparison Task
%%% ------------------------
% This script presents two sequential dot fields. The task is to assess
% which of the two sequentially-presented dots is higher.

%%% -------------------------------------
% Magnitude comparison stimulus pairings:
%%% -------------------------------------
%       [-6 -4 -2  0 +2 +4 +6];         % Randomly present one of each of the 6 (left) main stimuli and
%  5 => [ 2  3  4  5  7 10 14];         % subsequently match it with the matching stimuli (second).
%  7 => [ 3  4  5  7 10 14 20];
% 10 => [ 4  5  7 10 14 20 28];         % The sequence is generated by a geometric series.
% 14 => [ 5  7 10 14 20 28 40];
% 20 => [ 7 10 14 20 28 40 57];
% 28 => [10 14 20 28 40 57 80];

%%% -------------------------------------
% Roisky choice stimulus pairings:
%%% -------------------------------------
%  p x  [ 0  1  2  3  4  5  6  7  8];         % Randomly present one of each of the 6 (left) main stimuli and
%  5 => [ 5  6  7  8 10 12 14 17 20];         % simultaneously matched with the matching stimuli (second).
%  7 => [ 7  8 10 12 14    20      ];
% 10 => [10 12 14 17 20    28      ];
% 14 => [14 17 20 24 28    40      ];
% 20 => [20 24 28 34 40    57      ];
% 28 => [28 34 40 48 57    80      ];

%%% --------------
% Function Inputs:
%%% --------------
% subCode       = Subject's code (number with intiials)
% experiment 	= Name of the expreiment (M = Magnitution Comparison, R =
%                 Risky Choice)
% expType       = Magnitude Comparison (= 0) and Risky Choice (= 1)
% inputTrials   = Number of trials (divisible by 6 if startStim = 5 and maxStim = 28)
% startStim     = The starting value of the stimuli (= 5)
% numRoot       = Root used in the geometric series (= 2)
% maxStim       = Highest possible stimulus value   (= 28)
% rngMin        = Minimum range in the geometric sequence
% rngMax        = Maximum range in the geometric sequence
% rngSpc        = Spacing in the geometric sequence
% probability   = Set probability (works only in risky choice)

%%% Note for setting the ranges
% ------------------------
% For magnitude comparison
% range_min     = -6;
% range_max     =  6;
% range_space   =  2;
% ------------------------
% For risky choice:
% range_min     =  0;
% range_max     =  8;
% range_space   =  1;

rng('default')
rng('shuffle')


%% Define arrays
% Basic trial setup
magRiskTrial    = [];
nTrials         = inputTrials;

% Setup for the total set of dots
firststim_dot   = [];
firststim       = startStim;
root            = numRoot;
max             = maxStim;
min             = 0;
prob            = probability;

range_min       = rngMin;
range_max       = rngMax;
range_space     = rngSpc;

stimDurrPool    = 2200:200:2800;  % Note: Not sure if we need it.

%% Generate First and Second Sequences
%%% ----------------------------------

%%% ----------------------------------------------------
% Generate the number of dots used in the first sequence
%%% ----------------------------------------------------
while(max>= firststim > min)
    firststim_dot(end+1) = round(firststim);
    firststim = round(firststim*sqrt(root));
end

%%% -----------------------------------------------
% Generate the set of dots for the second sequence.
%%% -----------------------------------------------
secondstim_dot = zeros(length(firststim_dot), length(range_min:range_space:range_max));

j = range_min:range_space:range_max;
for i = 1:length(firststim_dot)
    secondstim_dot(i,:) = round(firststim_dot(i).*2.^(j/4));
end

%%% -----------------------------------------------------------------------------
%%% Goal 1: We already have a set of numbers in the first sequence (S1) and a set
%%% of numbers in the second sequence (S2). We need to sequentially pair S1
%%% with S2.

%% Generate Dot Magnitudes
%%% -----------------------

% -----------------------------------------------------------------------------------
% Replicate the first sequence to match the number of elements in the second sequence
s1 = zeros(length(secondstim_dot(1,:)),length(firststim_dot));
for j = 1:length(firststim_dot)
    s1(:,j) = firststim_dot(j).*ones(length(secondstim_dot(1,:)),1);
end


%%% Vary the values with equal payoff outcomes

switch expType
    case 1
        jitter_perm = [-1 1];
        perm_sequence = randperm(2);
        s2_mid = randperm(length(secondstim_dot(:,4)));
        for i = 1:length(secondstim_dot(:,4))
            s2_mod(i) = mod(s2_mid(i),2);
        end
        
        for i = 1:length(secondstim_dot(:,4))
            if s2_mod(i) == 1
                secondstim_dot(i,4) = secondstim_dot(i,4) + jitter_perm(perm_sequence(:,1));
            elseif s2_mod(i) == 0
                secondstim_dot(i,4) = secondstim_dot(i,4) - jitter_perm(perm_sequence(:,2));
            end
        end
    case 2
        jitter_perm = randperm(2);
        s2_mid = randperm(length(secondstim_dot(:,1)));
        for i = 1:length(secondstim_dot(:,1))
            s2_mod(i) = mod(s2_mid(i),2);
        end
        
        for i = 1:length(secondstim_dot(:,1))
            if s2_mod(i) == 1
                secondstim_dot(i,1) = secondstim_dot(i,1) + jitter_perm(:,1);
            elseif s2_mod(i) == 0
                secondstim_dot(i,1) = secondstim_dot(i,1) + jitter_perm(:,2);
            end
        end
end

% --------------------------
% Reshape matrix into arrays
rangeLength = length(secondstim_dot(1,:))*length(secondstim_dot(:,1));
s1 = reshape(s1, [1 rangeLength])';
s2 = reshape(secondstim_dot', [1 rangeLength])';

% --------------------------------------------------------------
% Create difference value between the first and second sequences
if expType == 1
    s2_prob = s2;
elseif expType == 2
    s2_prob = prob*s2;
end
diffVal = s1 - s2_prob;

correct = zeros(rangeLength,1);
for i = 1:rangeLength                 % This determines whether the answer was correct or incorrect.
    if diffVal(i) > 0
        correct(i) = 1;               % The first sequence is larger than the second sequence
    elseif diffVal(i) < 0
        correct(i) = -1;              % The first sequence is smaller than the second sequence
    elseif diffVal(i) == 0
        correct(i) = 0;               % The first sequence is equal to the second sequence
    end
end


total = [s1 s2 s2_prob diffVal correct];

trialSet = zeros(nTrials,length(total(1,:)));       % Move this up.
rangeMax = length(s2)/length(firststim_dot);        % Range of values
nTrialsMax = nTrials/length(firststim_dot);         % Divide the number of trials

% --------------------------------------------------------------------------------------
% This generates the random sets stimuli. Note: When we are going to set up the timings,
% we have to reorder the vector again such that there's a first sequence and a second
% sequence.

for i = 1:nTrials
    
    for j = 1:length(firststim_dot)
        for k = 1:length(s2)
            if total(k) == firststim_dot(j)
                trialSet(nTrialsMax*(j-1)+1: nTrialsMax*j,:) = total(randi([rangeMax*(j-1)+1 rangeMax*j],nTrials/length(firststim_dot),1),:);
            end
        end
    end
    
end

trialSet_perm1 = trialSet(randperm(nTrials),:);      % Shuffle the sequence of trials, but still maintaining the order of the rows.

% -------------------------------------------------------------
% Sequencing the magnitude stimuli: first (original 6 stimuli)
% and second (the variations)

s1_perm      = trialSet_perm1(:,1);
s2_perm      = trialSet_perm1(:,2);
s2Prob_perm  = trialSet_perm1(:,3);
diffVal_perm = trialSet_perm1(:,4);
correct_perm = trialSet_perm1(:,5);

s1_Reduc = [s1_perm s2Prob_perm diffVal_perm correct_perm];
s2_Reduc = [s2_perm s2Prob_perm diffVal_perm correct_perm];

stimSeq    = zeros(2*nTrials,length(s1_Reduc(1,:)));     % Create the sequence, but making sure the data
sequence   = zeros(2*nTrials,1);
trial      = zeros(2*nTrials,1);
s1Rep_perm = zeros(2*nTrials,1);

for i = 1:length(s1_Reduc)
    stimSeq(2*i - 1: 2*i,:) = [s1_Reduc(i,:); s2_Reduc(i,:)];
    sequence(2*i - 1: 2*i,1) = [2*i - 1; 2*i];
    trial(2*i - 1: 2*i,1) = [i; i];
    s1Rep_perm(2*i - 1: 2*i,1) = [s1_perm(i); s1_perm(i)];
end

diffVal_perm2 = stimSeq(:,1) - s1Rep_perm;

%keyboard

correct_perm2 = zeros(length(stimSeq),1);
for i = 1:length(stimSeq)
    if mod(sequence(i),2) == 1
        correct_perm2(i) = -200;            % Irrelevant value
    elseif mod(sequence(i),2) == 0
        if stimSeq(i,3) > 0
            correct_perm2(i) = 1;          % The first sequence is larger than the second sequence
        elseif stimSeq(i,3) < 0
            correct_perm2(i) = -1;         % The first sequence is smaller than the second sequence
        elseif stimSeq(i,3) == 0
            correct_perm2(i) = 0;          % The first sequence is equal to the second sequence
        end
    end
end

trialSet_perm2 = [sequence trial stimSeq s1Rep_perm diffVal_perm2 correct_perm2];

%% Add Counterbalancing parameter
if expType == 2
    interval = 6;
    balanceside1 = ones(interval,nTrials/interval);
    balanceside1(:,2:2:end) = -1;
    balanceside1 = reshape(balanceside1, [nTrials, 1]);
    
    balanceside2 = -1*ones(interval,nTrials/interval);
    balanceside2(:,2:2:end) = 1;
    balanceside2 = reshape(balanceside2, [nTrials, 1]);
    
    reset = [];
    if rand > 0.5;
        reset = balanceside1;
    else rand <= 0.5;
        reset = balanceside2;
    end
end

%for i = 1:nTrials
%    if balanceside(i) >= nTrials/2
%        reset(i)= 1;
%    elseif balanceside(i) < nTrials/2
%        reset(i) = -1;
%    elseif balanceside(i) == nTrials/2
%        reset(i) = 1;
%    end
%end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5
%% ADD TIMING VARIABLES

if expType == 1
    fixationWaitDuration = 3000*ones(1,nTrials);
    fixationStartDuration = 1000*ones(1,nTrials);                          % Duration of the red fixation cross
    fixationCueResponseDuration = 500*ones(1,nTrials);                     % Duration of the coins
    
    upperLimFixTime2 = 9000;                                                            % Upper bound of the ITI
    lowerLimFixTime2 = 6000;                                                            % Lower bound of the ITI
    fixDurations2 = randsample(lowerLimFixTime2:upperLimFixTime2,nTrials); % Duration of the ITI (jittered)
    
    rewardDurations = 600*ones(1,nTrials);                                 % Duration of the green arrows
    fixationResponseDuration = 2500*ones(1,nTrials);
    
    trialDuration = fixationWaitDuration + fixationStartDuration + 2*fixationCueResponseDuration + fixDurations2 + rewardDurations + fixationResponseDuration;
    trialSequence = cumsum(trialDuration);
end
%% Dump Arrays into a Structure

% Record responses
magRiskTrial.area       = -2.*ones(nTrials, 1);
magRiskTrial.accuracy   = -2.*ones(nTrials, 1);
magRiskTrial.rt         = -2.*ones(nTrials, 1);
magRiskTrial.leftRight  = -2.*ones(nTrials, 1);

% Timing
magRiskTrial.trialLength = trialDuration;
magRiskTrial.trialSequence = trialSequence;
magRiskTrial.fixDurations2 = fixDurations2;

magRiskTrial.fixedDuration         = -2.*ones(nTrials, 1);
magRiskTrial.firstStimDuration     = -2.*ones(nTrials, 1);
magRiskTrial.itimStimDuration      = -2.*ones(nTrials, 1);
magRiskTrial.secondStimDuration    = -2.*ones(nTrials, 1);
magRiskTrial.stimDuration          = -2.*ones(nTrials, 1);
magRiskTrial.trialDuration         = -2.*ones(nTrials, 1);
magRiskTrial.trialAccumulation     = -2.*ones(nTrials, 1);
magRiskTrial.firstCueDuration      = -2.*ones(nTrials, 1);
magRiskTrial.secondCueDuration     = -2.*ones(nTrials, 1);
magRiskTrial.breakDuration         = -2.*ones(nTrials, 1);

magRiskTrial.xpos       = zeros(nTrials, 1);
magRiskTrial.ypos       = zeros(nTrials, 1);

% timing stuff
% magRiskTrial.duration = -2.*ones(nTrials, 1);       % duration of stimuli-train
% magRiskTrial.jada_dur = jada_dur;
% magRiskTrial.jada = jada;
% magRiskTrial.Stim_times = Stim_times;
% magRiskTrial.Stim_times_pool = Stim_times_pool;
% magRiskTrial.Stim_times_samps = Stim_times_samps;

% The complete set of stimuli
magRiskTrial.firststim_dot   = firststim_dot;
magRiskTrial.secondstim_dot  = secondstim_dot;
magRiskTrial.s1              = s1;
magRiskTrial.s2              = s2;
magRiskTrial.diffVal         = diffVal;
magRiskTrial.correct         = correct;
magRiskTrial.total           = total;
magRiskTrial.trialSet        = trialSet;

% Randomized permutations of the stimuli
magRiskTrial.trialSet_perm1  = trialSet_perm1;
magRiskTrial.s1_perm         = s1_perm;
magRiskTrial.s2_perm         = s2_perm;
magRiskTrial.diffVal_perm    = diffVal_perm;
magRiskTrial.correct_perm    = correct_perm;
magRiskTrial.s1Rep_perm      = s1Rep_perm;
if expType == 2
    magRiskTrial.reset           = reset;
end

% Sequenced stimuli
magRiskTrial.s1_Reduc        = s1_Reduc;
magRiskTrial.s2_Reduc        = s2_Reduc;
magRiskTrial.stimSeq         = stimSeq;
magRiskTrial.sequence        = sequence;
magRiskTrial.s1Rep_perm      = s1Rep_perm;
magRiskTrial.s2Prob_perm     = s2Prob_perm;
magRiskTrial.diffVal_perm2   = diffVal_perm2;
magRiskTrial.correct_perm2   = correct_perm2;
magRiskTrial.sequence        = sequence;
magRiskTrial.trialSet_perm2  = trialSet_perm2;


% Single-valued stuff
magRiskTrial.nTrials         = nTrials;
magRiskTrial.rangeMax        = rangeMax;
magRiskTrial.nTrialsMax      = nTrialsMax;
magRiskTrial.prob            = prob;

% Test stuff
magRiskTrial.selectedTrial = randsample(1:nTrials,1);
magRiskTrial.pressedKey = -2 .* ones(1,nTrials);
magRiskTrial.constSide = randsample([0 0],nTrials,1);

% Save structure here. 
if expType == 1
    if subCode < 10
        save([openFolder subFolder '\' 'sub_0' num2str(subCode) '_run_0' num2str(run) '_' nameSub '_genPar_0'  num2str(expType) '_magComp' '.mat'],'magRiskTrial');
    elseif subCode >= 10
        save([openFolder subFolder '\' 'sub_' num2str(subCode) '_run_0' num2str(run) '_' nameSub '_genPar_0'  num2str(expType) '_magComp' '.mat'],'magRiskTrial');
    end
elseif expType == 2
    if subCode < 10
        save([openFolder subFolder '\' 'sub_0' num2str(subCode) '_' nameSub '_genPar_0'  num2str(expType) '_riskComp' '.mat'],'magRiskTrial');
    elseif subCode >= 10
        save([openFolder subFolder '\' 'sub_' num2str(subCode) '_' nameSub '_genPar_0'  num2str(expType) '_riskComp' '.mat'],'magRiskTrial');
    end
end

return