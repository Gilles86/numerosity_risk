
model {

	

### Store The Priors Here

noise.mu ~ dunif(0.0001, 10)
sigma.mu ~ dunif(0.0001, 10)

noise.mu.coin ~ dnorm(0, 0.000001)
 
sigma.mu.coin ~ dnorm(0, 0.000001)
 

noise.si ~ dunif(0.0000001, 1)

sigma.si ~ dunif(0.0000001, 1)

noise.si.coin ~ dunif(0.00001, 1)

sigma.si.coin ~ dunif(0.00001, 1)


for (p in 1:ns){

noise.p[p] ~ dnorm(noise.mu, 1/noise.si^2)
sigma.p[p] ~ dnorm(sigma.mu, 1/sigma.si^2)

noise.p.coin[p] ~ dnorm(noise.mu.coin, 1/noise.si.coin^2)
sigma.p.coin[p] ~ dnorm(sigma.mu.coin, 1/sigma.si.coin^2)

}


for (i in 1:N) {
    	
    	
### The Model 	    
                
		choice_data[i] ~ dbern(choice_dataHat[i])
		choice_dataPred[i] ~ dbern(choice_dataHat[i])

                choice_dataHat[i] <- pnorm( noise[i]*log(x[i]/c[i]) - sigma[i],  0 , 1  )
                noise[i] <- max(0.0001, (noise.p[idXP[i]] + num[i]*noise.p.coin[idXP[i]]) )
                sigma[i] <- max(0.0001, (sigma.p[idXP[i]] + num[i]*sigma.p.coin[idXP[i]]) )

		#choice_dataHatP[i] <- pnorm( (log(x[i]/c[i]) - (beta[i]^-1)*log(p^-1))/(sqrt(2)*noise[i]),  0 , 1  )	
		#choice_dataHatM[i] <- pnorm( (log(x[i]/c[i]))/(sqrt(2)*noise[i]),  0 , 1  )	

		#choice_dataHat[i] <- pnorm( (log(x[i]/c[i]) - (beta[i]^-1)*log(prob[i]^-1))/(sqrt(2)*noise[i]),  0 , 1  )	
		#choice_dataHat[i] <- pnorm( (log(x[i]/c[i]) - (beta[i]^-1)*log(p^-1))/(sqrt(2)*noise[i]),  0 , 1  )
		#choice_dataHat[i] <- pnorm( noise[i]*(x[i]-c[i]) - sigma[i],  0 , 1  )	

 		#beta[i] <- (sigma[i]^2)/(sigma[i]^2 + noise[i]^2)

}

  	

#p <- 0.55
  
#sigma <- 0.33921615	
#sigma <- 0.1776504


}




